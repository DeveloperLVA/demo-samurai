{"version":3,"sources":["components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["DialogItem","props","path","id","className","s","dialog","active","to","name","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","Message","message","React","createRef","isAuth","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this"],"mappings":"0KAaeA,EATI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,qDCD5BC,EAAcC,YAAiB,IAkBtBC,cAAW,CAACC,KAAM,2BAAlBD,EAfQ,SAACX,GACpB,OACI,0BAAMa,SAAUb,EAAMc,cACd,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAAUV,GACrBW,YAAY,qBAAqBZ,KAAK,oBAEtC,6BACI,6CC0CTa,EAnDC,SAACrB,GAEDA,EAAMsB,YAAlB,IAGIC,EAAkBvB,EAAMwB,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAExB,GAAIA,GAAIwB,EAAExB,QACpF0B,EAAmB5B,EAAM6B,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAEC,EAAA,EAAF,CAAUC,QAASF,EAAEE,QAASL,IAAKG,EAAE5B,QAE/D+B,IAAMC,YAQ3B,OAAMlC,EAAMmC,OAEJ,yBAAKhC,UAAWC,IAAEoB,SACtB,yBAAKrB,UAAWC,IAAEgC,cACfb,GAGC,yBAAKpB,UAAWC,IAAEyB,UACd,6BAAMD,IAIV,kBAAC,EAAD,CAAgBf,SAjBL,SAACwB,GAChBrC,EAAMsC,YAAaD,EAAOE,oBAIF,kBAAC,IAAD,CAAUhC,GAAI,Y,wCCpB1CiC,EAA6B,SAACC,GAAD,MAAY,CACzCN,OAAQM,EAAMC,KAAKP,S,QCqBRQ,sBACXC,aApBkB,SAACH,GACnB,MAAO,CACHjB,QAASiB,EAAMnB,YAAYE,QAC3BK,SAAUY,EAAMnB,YAAYO,SAC5BU,eAAgBE,EAAMnB,YAAYiB,mBAIjB,SAACM,GACtB,MAAO,CACHP,YAAa,SAACC,GACVM,EAASC,YAAmBP,UDRR,SAACQ,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKjD,MAAMmC,OACT,kBAACY,EAAcE,KAAKjD,OADK,kBAAC,IAAD,CAAUO,GAAG,eAHV,GACV0B,IAAMc,WAavC,OAJqCH,YAASJ,EAATI,CAAsCI,KCMhEL,CAGZtB","file":"static/js/4.be517578.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport { Textarea } from './../../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from './../../../utils/validators/validators';\r\n\r\n\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n                <div>\r\n                    <Field component={Textarea} \r\n                    validate={[required, maxLength50]}\r\n                    placeholder='Enter your message' name=\"newMessageBody\"  />\r\n                </div>\r\n                    <div>\r\n                        <button>Send</button>\r\n                    </div>\r\n                </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm ({form: 'dialog-add-message-form'})(AddMessageForm);\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport { Field } from 'redux-form';\r\nimport { reduxForm } from 'redux-form';\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = props.messages.map(m => < Message message={m.message} key={m.id} />);\r\n    //let newMessageBody = state.newMessageBody;\r\n    let newMessageBody = React.createRef();\r\n\r\n\r\n    let addNewMessage =(values) => { \r\n        props.sendMessage (values.newMessageBody);\r\n    }\r\n\r\n\r\n    if ( !props.isAuth) return  <Redirect to={\"/login\"} />  ;  // происходит РЕДИРЕКТ\r\n\r\n    return (<div className={s.dialogs}>\r\n        <div className={s.dialogsItems}>\r\n          {dialogsElements}\r\n        </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                \r\n\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n// const AddMessageForm = (props) => {\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit} >\r\n//                 <div>\r\n//                     <Field component=\"textarea\" name=\"newMessageBody\" placeholder=\"Enter your message\" />\r\n//                                       placeholder='Enter yuor message'\r\n//                         value= {props.newMessageBody} /> */}\r\n//                     </div>\r\n//                     <div>\r\n//                         <button>Send</button></div>\r\n//                 </form>\r\n//     )\r\n// }\r\n\r\n// const AddMessageFormRedux =reduxForm ({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n})  // возвращает обьект поэтому стоит \"обертывание\" в ()\r\n\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends  React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return  <Redirect to='/login' />   // происходит РЕДИРЕКТ\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect) (RedirectComponent);\r\n\r\n\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        messages: state.dialogsPage.messages,\r\n        newMessageBody: state.dialogsPage.newMessageBody\r\n        }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody) );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default compose (\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n) (Dialogs);\r\n"],"sourceRoot":""}